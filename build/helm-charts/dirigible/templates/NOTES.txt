1. Assign the required roles to your user.
1.1 Run test and status for the deployment.  
For testing - helm test dirigible
For status - helm status dirigible

{{- if .Values.ingress.enabled }}

2. Access the Eclipse Dirigible instance at: http{{ if $.Values.ingress.tls }}s{{ end }}://{{ .Release.Name }}.{{ .Values.ingress.host }}

{{- if .Values.keycloak.enabled }}

3. Access the Keycloak instance at: http{{ if $.Values.ingress.tls }}s{{ end }}://{{ .Values.keycloak.name }}.{{ .Values.ingress.host }}

{{- end }}
{{- else if contains "NodePort" .Values.service.type }}

2. Access the Eclipse Dirigible instance at:
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "dirigible.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT

{{- else if contains "LoadBalancer" .Values.service.type }}

2. Access the Eclipse Dirigible instance at:
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "dirigible.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "dirigible.fullname" . }}'

{{- if .Values.keycloak.enabled }}

3. Access the Keycloak instance at: https://{{ .Values.keycloak.name }}.{{ .Values.ingress.host }}
  NOTE: It may take a few minutes for the APIRule to be accessible.

{{- end }}
{{- else if contains "ClusterIP" .Values.service.type }}
{{- if .Values.istio.enabled }}

2. Access the Eclipse Dirigible at:

  kubectl get svc istio-ingressgateway -n istio-system \        
              -o jsonpath="{.status.loadBalancer.ingress[*].hostname}"
{{- else }}
2. Access the Eclipse Dirigible instance at:
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "dirigible.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:8080

{{- end }}
{{- end }}
